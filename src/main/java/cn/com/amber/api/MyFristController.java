package cn.com.amber.api;import cn.com.amber.api.dto.req.AccountReq;import cn.com.amber.api.dto.response.AccountDTO;import cn.com.amber.commons.untils.StringUtil;import cn.com.amber.entity.Account;import cn.com.amber.events.Event;import cn.com.amber.events.EventTypeEnum;import cn.com.amber.events.Producer;import cn.com.amber.infrastructure.annotation.ApiLog;import cn.com.amber.infrastructure.api.Response;import cn.com.amber.infrastructure.api.enums.ResponseCode;import cn.com.amber.infrastructure.exception.BusinessException;import cn.com.amber.mapper.AccountMapper;import cn.com.amber.remote.AccountFacade;import com.alibaba.fastjson2.JSONObject;import lombok.extern.slf4j.Slf4j;import org.redisson.api.RBucket;import org.redisson.api.RLock;import org.redisson.api.RedissonClient;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import java.util.Date;import java.util.UUID;import java.util.concurrent.TimeUnit;/** * TODO:class description * * @author yangying * @version 1.0 * @since 2022/9/3 **/@Slf4j@RestController@RequestMapping(path = "/user")public class MyFristController {    @Resource    private AccountMapper accountMapper;    @Resource    private AccountFacade accountFacade;    @Resource    private RedissonClient redissonClient;    @Resource    private Producer producer;    @Value("${accountUrl}")    private String accountUrl;    @ApiLog(ApiLog.API_RESTFUL)    @RequestMapping(path = "/getUser/{userId}")    public String getUser(@PathVariable String userId) {        if (userId.equals("111")) {            return "john";        }        return "has not found";    }    /**     * 测试从Feign与Eureka的集成，从Eureka的服务列表中请求远程服务     *     * @param accountNo     * @return     */    @RequestMapping(path = "/getAccount/{accountNo}")    public String getAccount(@PathVariable String accountNo) {        if (StringUtil.isBlankString(accountNo)) {            return "get nothing";        }        Account account = accountMapper.selectByAccountNo(accountNo);        return JSONObject.toJSONString(account);    }    @RequestMapping(path = "/getRemoteAccount/{accountNo}")    public String getRemoteAccount(@PathVariable String accountNo) {        return accountFacade.queryAccount(accountNo);    }    /**     * 测试从apollo获取配置     *     * @return     */    @RequestMapping(path = "/getAccountUrl")    public String getRemoteAccount() {        return accountUrl;    }    @RequestMapping(path = "/cacheAccount")    public Response cacheAccount(@RequestBody AccountReq accountReq) {        Response<AccountDTO> accountResponse;        String reqId = accountReq.getReqId();        if (StringUtil.isBlankString(accountReq.getAccountNo())) {            return Response.FAIL(ResponseCode.ILLEGAL_ARGUMENT,"accountNo");        }        String accountNo = accountReq.getAccountNo();        RBucket<Account> bucket = redissonClient.getBucket(accountNo);        Account account = null;        if(!bucket.isExists()){            account = accountMapper.selectByAccountNo(accountNo);            if(account == null){                throw BusinessException.create(ResponseCode.NOT_EXIST_ACCOUNT,accountNo);            }            bucket.set(account,10000, TimeUnit.MILLISECONDS);            account = bucket.get();        }        AccountDTO accountDTO =                AccountDTO.builder().accountNo(account.getAccountNo())                        .balance(account.getBalance())                        .balanceDirection(account.getDirection())                        .name(account.getAccountName()).build();        accountResponse = Response.SUCCESS(accountDTO);        return accountResponse;    }    @RequestMapping(path = "/cacheAccount/{accountNo}")    public Response<AccountDTO> cacheAccount(@PathVariable String accountNo) {        Response<AccountDTO> accountResponse;        String reqId = UUID.randomUUID().toString();        RBucket<Account> bucket = redissonClient.getBucket(accountNo);        Account account = null;        if(!bucket.isExists()){            account = accountMapper.selectByAccountNo(accountNo);            if(account == null){                throw BusinessException.create(ResponseCode.NOT_EXIST_ACCOUNT,accountNo);            }            bucket.set(account,20000, TimeUnit.MILLISECONDS);        }        account = bucket.get();        AccountDTO accountDTO =                AccountDTO.builder().accountNo(account.getAccountNo())                        .balance(account.getBalance())                        .balanceDirection(account.getDirection())                        .name(account.getAccountName()).build();        accountResponse = Response.SUCCESS(accountDTO);        return accountResponse;    }    @RequestMapping(path = "/notify/accountCreated/{accountNo}")    public Response<Void> notifyAccountCreated(@PathVariable String accountNo){        String reqId = UUID.randomUUID().toString();        Response<Void> resp = Response.SUCCESS();        Account account = new Account();        account.setAccountNo(accountNo);        Event<Account> event = new Event<>(UUID.randomUUID().toString(),accountNo,new Date(),new Date(),account                , EventTypeEnum.ACCOUNT_CREATED);        try {            producer.send(event);        }catch (Exception e){            log.info("send message failed:{}",e.getMessage(),e);            resp = Response.SYSTEM_ERROR();;        }        return resp;    }    @ApiLog(ApiLog.API_RESTFUL)    @RequestMapping(path = "/testlock/{accountNo}")    public Response<Void> testLock(@PathVariable String accountNo){        String reqId = UUID.randomUUID().toString();        Response<Void> resp = null;        RLock lock = null;        try {            log.info("开始获取锁,key:{},reqId:{},threadId:{}",accountNo,reqId,Thread.currentThread().getId());            lock = redissonClient.getLock(accountNo);            boolean isAcquired= lock.tryLock(500,TimeUnit.MILLISECONDS);            if(isAcquired){                log.info("获取锁成功,key:{},reqId:{}",lock.getName(),reqId);                Thread.sleep(1000,10);            }else {                log.info("获取锁失败,reqId:{}",reqId);                resp = Response.FAIL(ResponseCode.LOCK_FAIL);            }        }catch (Exception e){            log.info("获取锁失败 failed:{},reqId:{}",e.getMessage(),reqId,e);            resp = Response.SYSTEM_ERROR();        }finally {            if(lock !=null && lock.isLocked()&&lock.isHeldByCurrentThread()){                log.info("释放锁 key:{}",lock.getName());                lock.unlock();            }        }        return resp;    }}