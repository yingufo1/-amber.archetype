package cn.com.amber.events;import com.google.gson.Gson;import org.apache.rocketmq.client.exception.MQBrokerException;import org.apache.rocketmq.client.exception.MQClientException;import org.apache.rocketmq.client.producer.DefaultMQProducer;import org.apache.rocketmq.client.producer.SendResult;import org.apache.rocketmq.common.message.Message;import org.apache.rocketmq.remoting.exception.RemotingException;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;/** * 事件生产者 * * @author yangying * @version 1.0 * @since 2022/9/18 **/@Componentpublic class Producer {    @Value("${rocketmq.namesrvAddress}")    private String nameSrvAddress;    @Value(("${rocketmq.topic"))    private String topic;    @Value(("${rocketmq.producer.group"))    private String producerGroup;    private DefaultMQProducer defaultMQProducer;    public Producer(String nameSrvAddress, String topic, String producerGroup) {        this.nameSrvAddress = nameSrvAddress;        this.topic = topic;        this.producerGroup = producerGroup;    }    @PostConstruct    public void init() {        defaultMQProducer = new DefaultMQProducer(producerGroup);        defaultMQProducer.setNamesrvAddr(nameSrvAddress);        try {            defaultMQProducer.start();        } catch (MQClientException e) {            throw new RuntimeException(e);        }    }    public void send(Event event) {        send(event, "*");    }    public void send(Event event, String tags) {        Message message = new Message(topic, tags, new Gson().toJson(event).getBytes());        message.setKeys(event.getKey());        try {            SendResult sendResult = defaultMQProducer.send(message);            System.out.println("消息发送结果："+sendResult.getMsgId());        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {            throw new RuntimeException(e);        }    }    public void shutdown() {        defaultMQProducer.shutdown();    }}