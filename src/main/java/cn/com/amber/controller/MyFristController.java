package cn.com.amber.controller;import cn.com.amber.dto.BaseResponse;import cn.com.amber.dto.req.AccountReq;import cn.com.amber.dto.response.AccountDTO;import cn.com.amber.entity.Account;import cn.com.amber.events.Event;import cn.com.amber.events.EventTypeEnum;import cn.com.amber.events.Producer;import cn.com.amber.mapper.AccountMapper;import cn.com.amber.remote.AccountFacade;import com.alibaba.fastjson2.JSONObject;import lombok.extern.slf4j.Slf4j;import org.redisson.api.RBucket;import org.redisson.api.RedissonClient;import org.springframework.beans.factory.annotation.Value;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import java.util.Date;import java.util.UUID;import java.util.concurrent.TimeUnit;/** * TODO:class description * * @author yangying * @version 1.0 * @since 2022/9/3 **/@Slf4j@RestController@RequestMapping(path = "/user")public class MyFristController {    @Resource    private AccountMapper accountMapper;    @Resource    private AccountFacade accountFacade;    @Resource    private RedissonClient redissonClient;    @Resource    private Producer producer;    @Value("${accountUrl}")    private String accountUrl;    @RequestMapping(path = "/getUser/{userId}")    public String getUer(@PathVariable String userId) {        if (userId.equals("111")) {            return "john";        }        return "has not found";    }    /**     * 测试从Feign与Eureka的集成，从Eureka的服务列表中请求远程服务     *     * @param accountNo     * @return     */    @RequestMapping(path = "/getAccount/{accountNo}")    public String getAccount(@PathVariable String accountNo) {        if (StringUtils.isEmpty(accountNo)) {            return "get nothing";        }        Account account = accountMapper.selectByAccountNo(accountNo);        return JSONObject.toJSONString(account);    }    @RequestMapping(path = "/getRemoteAccount/{accountNo}")    public String getRemoteAccount(@PathVariable String accountNo) {        return accountFacade.queryAccount(accountNo);    }    /**     * 测试从apollo获取配置     *     * @return     */    @RequestMapping(path = "/getAccountUrl")    public String getRemoteAccount() {        return accountUrl;    }    @RequestMapping(path = "/cacheAccount")    public BaseResponse<AccountDTO> cacheAccount(@RequestBody AccountReq accountReq) {        BaseResponse<AccountDTO> accountResponse;        if (StringUtils.isEmpty(accountReq.getAccountNo())) {            accountResponse = new BaseResponse("E0001", "accountNo为空", accountReq.getRequestId());            return accountResponse;        }        String accountNo = accountReq.getAccountNo();        RBucket<Account> bucket = redissonClient.getBucket(accountNo);        Account account = null;        if(!bucket.isExists()){            account = accountMapper.selectByAccountNo(accountNo);            if(account == null){                accountResponse = new BaseResponse("E0002", "未查询到账户信息,accountNo:"+accountNo, accountReq.getRequestId());                return accountResponse;            }            bucket.set(account,10000, TimeUnit.MILLISECONDS);            account = bucket.get();        }        accountResponse = new BaseResponse("0000", "查询成功,accountNo:"+accountNo, accountReq.getRequestId());        AccountDTO accountDTO =                AccountDTO.builder().accountNo(account.getAccountNo())                        .balance(account.getBalance())                        .balanceDirection(account.getDirection())                        .name(account.getAccountName()).build();        accountResponse.setR(accountDTO);        return accountResponse;    }    @RequestMapping(path = "/cacheAccount/{accountNo}")    public BaseResponse<AccountDTO> cacheAccount(@PathVariable String accountNo) {        BaseResponse<AccountDTO> accountResponse;        RBucket<Account> bucket = redissonClient.getBucket(accountNo);        Account account = null;        if(!bucket.isExists()){            account = accountMapper.selectByAccountNo(accountNo);            if(account == null){                accountResponse = new BaseResponse("E0002", "未查询到账户信息,accountNo:"+accountNo, UUID.randomUUID().toString());                return accountResponse;            }            bucket.set(account,20000, TimeUnit.MILLISECONDS);        }        account = bucket.get();        accountResponse = new BaseResponse("0000", "查询成功,accountNo:"+accountNo, UUID.randomUUID().toString());        AccountDTO accountDTO =                AccountDTO.builder().accountNo(account.getAccountNo())                        .balance(account.getBalance())                        .balanceDirection(account.getDirection())                        .name(account.getAccountName()).build();        accountResponse.setR(accountDTO);        return accountResponse;    }    @RequestMapping(path = "/notify/accountCreated/{accountNo}")    public BaseResponse<Void> notifyAccountCreated(@PathVariable String accountNo){        String reqId = UUID.randomUUID().toString();        BaseResponse<Void> resp = new BaseResponse("0000", "通知成功",reqId);        Account account = new Account();        account.setAccountNo(accountNo);        Event<Account> event = new Event<>(UUID.randomUUID().toString(),accountNo,new Date(),new Date(),account                , EventTypeEnum.ACCOUNT_CREATED);        try {            producer.send(event);        }catch (Exception e){            log.info("send message failed:{}",e.getMessage(),e);            resp = new BaseResponse("E002", "通知失败,原因:"+e.getMessage(),reqId);        }        return resp;    }}